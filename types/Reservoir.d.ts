/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface ReservoirInterface extends ethers.utils.Interface {
  functions: {
    "auditAssets()": FunctionFragment;
    "bondDeposit(uint256,uint256)": FunctionFragment;
    "bondQueue(address)": FunctionFragment;
    "bonds(uint256)": FunctionFragment;
    "collateralManagerQueue(address)": FunctionFragment;
    "collateralManagers(uint256)": FunctionFragment;
    "collateralTokenQueue(address)": FunctionFragment;
    "collateralTokens(uint256)": FunctionFragment;
    "debtorBalances(address)": FunctionFragment;
    "debtorQueue(address)": FunctionFragment;
    "debtors(uint256)": FunctionFragment;
    "deposit(address,uint256,uint256)": FunctionFragment;
    "depositorQueue(address)": FunctionFragment;
    "depositors(uint256)": FunctionFragment;
    "excessAssets()": FunctionFragment;
    "incurDebt(address,uint256)": FunctionFragment;
    "liquidityManagerQueue(address)": FunctionFragment;
    "liquidityManagers(uint256)": FunctionFragment;
    "manage(address,uint256)": FunctionFragment;
    "mintRewards(address,uint256)": FunctionFragment;
    "owner()": FunctionFragment;
    "queue(uint8,address)": FunctionFragment;
    "queueLength()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "repayDebtWithCollateral(address,uint256)": FunctionFragment;
    "repayDebtWithSDOGE(uint256)": FunctionFragment;
    "rewardManagerQueue(address)": FunctionFragment;
    "rewardManagers(uint256)": FunctionFragment;
    "sSDOGE()": FunctionFragment;
    "sSDOGEQueue()": FunctionFragment;
    "sdoge()": FunctionFragment;
    "spenderQueue(address)": FunctionFragment;
    "spenders(uint256)": FunctionFragment;
    "toggle(uint8,address)": FunctionFragment;
    "totalAssets()": FunctionFragment;
    "totalDebt()": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "withdraw(address,uint256)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "auditAssets",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "bondDeposit",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "bondQueue", values: [string]): string;
  encodeFunctionData(functionFragment: "bonds", values: [BigNumberish]): string;
  encodeFunctionData(
    functionFragment: "collateralManagerQueue",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "collateralManagers",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "collateralTokenQueue",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "collateralTokens",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "debtorBalances",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "debtorQueue", values: [string]): string;
  encodeFunctionData(
    functionFragment: "debtors",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "deposit",
    values: [string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "depositorQueue",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "depositors",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "excessAssets",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "incurDebt",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "liquidityManagerQueue",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "liquidityManagers",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "manage",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "mintRewards",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "queue",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "queueLength",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "repayDebtWithCollateral",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "repayDebtWithSDOGE",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "rewardManagerQueue",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "rewardManagers",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "sSDOGE", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "sSDOGEQueue",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "sdoge", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "spenderQueue",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "spenders",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "toggle",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "totalAssets",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "totalDebt", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "withdraw",
    values: [string, BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "auditAssets",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "bondDeposit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "bondQueue", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "bonds", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "collateralManagerQueue",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "collateralManagers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "collateralTokenQueue",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "collateralTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "debtorBalances",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "debtorQueue",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "debtors", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "deposit", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "depositorQueue",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "depositors", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "excessAssets",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "incurDebt", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "liquidityManagerQueue",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "liquidityManagers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "manage", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "mintRewards",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "queue", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "queueLength",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "repayDebtWithCollateral",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "repayDebtWithSDOGE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "rewardManagerQueue",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "rewardManagers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "sSDOGE", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "sSDOGEQueue",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "sdoge", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "spenderQueue",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "spenders", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "toggle", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "totalAssets",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "totalDebt", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;

  events: {
    "LogActivateChange(uint8,address,bool)": EventFragment;
    "LogAuditAssets(uint256)": EventFragment;
    "LogCreateDebt(address,address,uint256,uint256)": EventFragment;
    "LogDeposit(address,uint256,uint256)": EventFragment;
    "LogManageAssets(address,uint256)": EventFragment;
    "LogMintRewards(address,address,uint256)": EventFragment;
    "LogQueueChange(uint8,address)": EventFragment;
    "LogRepayDebt(address,address,uint256,uint256)": EventFragment;
    "LogUpdateAssets(uint256)": EventFragment;
    "LogWithdraw(address,uint256,uint256)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "LogActivateChange"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LogAuditAssets"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LogCreateDebt"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LogDeposit"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LogManageAssets"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LogMintRewards"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LogQueueChange"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LogRepayDebt"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LogUpdateAssets"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LogWithdraw"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
}

export type LogActivateChangeEvent = TypedEvent<
  [number, string, boolean] & {
    target: number;
    activated: string;
    result: boolean;
  }
>;

export type LogAuditAssetsEvent = TypedEvent<
  [BigNumber] & { totalAssets: BigNumber }
>;

export type LogCreateDebtEvent = TypedEvent<
  [string, string, BigNumber, BigNumber] & {
    debtor: string;
    token: string;
    amount: BigNumber;
    value: BigNumber;
  }
>;

export type LogDepositEvent = TypedEvent<
  [string, BigNumber, BigNumber] & {
    token: string;
    amount: BigNumber;
    value: BigNumber;
  }
>;

export type LogManageAssetsEvent = TypedEvent<
  [string, BigNumber] & { token: string; amount: BigNumber }
>;

export type LogMintRewardsEvent = TypedEvent<
  [string, string, BigNumber] & {
    caller: string;
    recipient: string;
    amount: BigNumber;
  }
>;

export type LogQueueChangeEvent = TypedEvent<
  [number, string] & { target: number; queued: string }
>;

export type LogRepayDebtEvent = TypedEvent<
  [string, string, BigNumber, BigNumber] & {
    debtor: string;
    token: string;
    amount: BigNumber;
    value: BigNumber;
  }
>;

export type LogUpdateAssetsEvent = TypedEvent<
  [BigNumber] & { totalAssets: BigNumber }
>;

export type LogWithdrawEvent = TypedEvent<
  [string, BigNumber, BigNumber] & {
    token: string;
    amount: BigNumber;
    value: BigNumber;
  }
>;

export type OwnershipTransferredEvent = TypedEvent<
  [string, string] & { previousOwner: string; newOwner: string }
>;

export class Reservoir extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: ReservoirInterface;

  functions: {
    auditAssets(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    bondDeposit(
      amount_: BigNumberish,
      profit_: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    bondQueue(arg0: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    bonds(arg0: BigNumberish, overrides?: CallOverrides): Promise<[string]>;

    collateralManagerQueue(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    collateralManagers(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    collateralTokenQueue(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    collateralTokens(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    debtorBalances(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    debtorQueue(arg0: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    debtors(arg0: BigNumberish, overrides?: CallOverrides): Promise<[string]>;

    deposit(
      token_: string,
      amount_: BigNumberish,
      profit_: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    depositorQueue(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    depositors(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    excessAssets(overrides?: CallOverrides): Promise<[BigNumber]>;

    incurDebt(
      bond_: string,
      amount_: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    liquidityManagerQueue(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    liquidityManagers(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    manage(
      bond_: string,
      amount_: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    mintRewards(
      recipient_: string,
      amount_: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    queue(
      target_: BigNumberish,
      address_: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    queueLength(overrides?: CallOverrides): Promise<[BigNumber]>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    repayDebtWithCollateral(
      bond_: string,
      amount_: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    repayDebtWithSDOGE(
      amount_: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    rewardManagerQueue(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    rewardManagers(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    sSDOGE(overrides?: CallOverrides): Promise<[string]>;

    sSDOGEQueue(overrides?: CallOverrides): Promise<[BigNumber]>;

    sdoge(overrides?: CallOverrides): Promise<[string]>;

    spenderQueue(arg0: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    spenders(arg0: BigNumberish, overrides?: CallOverrides): Promise<[string]>;

    toggle(
      target_: BigNumberish,
      address_: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    totalAssets(overrides?: CallOverrides): Promise<[BigNumber]>;

    totalDebt(overrides?: CallOverrides): Promise<[BigNumber]>;

    transferOwnership(
      newOwner_: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    withdraw(
      bond_: string,
      amount_: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  auditAssets(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  bondDeposit(
    amount_: BigNumberish,
    profit_: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  bondQueue(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  bonds(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

  collateralManagerQueue(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  collateralManagers(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  collateralTokenQueue(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  collateralTokens(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  debtorBalances(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  debtorQueue(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  debtors(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

  deposit(
    token_: string,
    amount_: BigNumberish,
    profit_: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  depositorQueue(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  depositors(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

  excessAssets(overrides?: CallOverrides): Promise<BigNumber>;

  incurDebt(
    bond_: string,
    amount_: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  liquidityManagerQueue(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  liquidityManagers(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  manage(
    bond_: string,
    amount_: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  mintRewards(
    recipient_: string,
    amount_: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  owner(overrides?: CallOverrides): Promise<string>;

  queue(
    target_: BigNumberish,
    address_: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  queueLength(overrides?: CallOverrides): Promise<BigNumber>;

  renounceOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  repayDebtWithCollateral(
    bond_: string,
    amount_: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  repayDebtWithSDOGE(
    amount_: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  rewardManagerQueue(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  rewardManagers(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  sSDOGE(overrides?: CallOverrides): Promise<string>;

  sSDOGEQueue(overrides?: CallOverrides): Promise<BigNumber>;

  sdoge(overrides?: CallOverrides): Promise<string>;

  spenderQueue(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  spenders(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

  toggle(
    target_: BigNumberish,
    address_: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  totalAssets(overrides?: CallOverrides): Promise<BigNumber>;

  totalDebt(overrides?: CallOverrides): Promise<BigNumber>;

  transferOwnership(
    newOwner_: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  withdraw(
    bond_: string,
    amount_: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    auditAssets(overrides?: CallOverrides): Promise<void>;

    bondDeposit(
      amount_: BigNumberish,
      profit_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    bondQueue(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    bonds(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

    collateralManagerQueue(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    collateralManagers(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    collateralTokenQueue(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    collateralTokens(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    debtorBalances(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    debtorQueue(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    debtors(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

    deposit(
      token_: string,
      amount_: BigNumberish,
      profit_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    depositorQueue(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    depositors(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

    excessAssets(overrides?: CallOverrides): Promise<BigNumber>;

    incurDebt(
      bond_: string,
      amount_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    liquidityManagerQueue(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    liquidityManagers(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    manage(
      bond_: string,
      amount_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    mintRewards(
      recipient_: string,
      amount_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<string>;

    queue(
      target_: BigNumberish,
      address_: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    queueLength(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    repayDebtWithCollateral(
      bond_: string,
      amount_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    repayDebtWithSDOGE(
      amount_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    rewardManagerQueue(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    rewardManagers(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    sSDOGE(overrides?: CallOverrides): Promise<string>;

    sSDOGEQueue(overrides?: CallOverrides): Promise<BigNumber>;

    sdoge(overrides?: CallOverrides): Promise<string>;

    spenderQueue(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    spenders(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

    toggle(
      target_: BigNumberish,
      address_: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    totalAssets(overrides?: CallOverrides): Promise<BigNumber>;

    totalDebt(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner_: string,
      overrides?: CallOverrides
    ): Promise<void>;

    withdraw(
      bond_: string,
      amount_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "LogActivateChange(uint8,address,bool)"(
      target?: BigNumberish | null,
      activated?: null,
      result?: null
    ): TypedEventFilter<
      [number, string, boolean],
      { target: number; activated: string; result: boolean }
    >;

    LogActivateChange(
      target?: BigNumberish | null,
      activated?: null,
      result?: null
    ): TypedEventFilter<
      [number, string, boolean],
      { target: number; activated: string; result: boolean }
    >;

    "LogAuditAssets(uint256)"(
      totalAssets?: BigNumberish | null
    ): TypedEventFilter<[BigNumber], { totalAssets: BigNumber }>;

    LogAuditAssets(
      totalAssets?: BigNumberish | null
    ): TypedEventFilter<[BigNumber], { totalAssets: BigNumber }>;

    "LogCreateDebt(address,address,uint256,uint256)"(
      debtor?: string | null,
      token?: string | null,
      amount?: null,
      value?: null
    ): TypedEventFilter<
      [string, string, BigNumber, BigNumber],
      { debtor: string; token: string; amount: BigNumber; value: BigNumber }
    >;

    LogCreateDebt(
      debtor?: string | null,
      token?: string | null,
      amount?: null,
      value?: null
    ): TypedEventFilter<
      [string, string, BigNumber, BigNumber],
      { debtor: string; token: string; amount: BigNumber; value: BigNumber }
    >;

    "LogDeposit(address,uint256,uint256)"(
      token?: string | null,
      amount?: null,
      value?: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber],
      { token: string; amount: BigNumber; value: BigNumber }
    >;

    LogDeposit(
      token?: string | null,
      amount?: null,
      value?: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber],
      { token: string; amount: BigNumber; value: BigNumber }
    >;

    "LogManageAssets(address,uint256)"(
      token?: string | null,
      amount?: null
    ): TypedEventFilter<
      [string, BigNumber],
      { token: string; amount: BigNumber }
    >;

    LogManageAssets(
      token?: string | null,
      amount?: null
    ): TypedEventFilter<
      [string, BigNumber],
      { token: string; amount: BigNumber }
    >;

    "LogMintRewards(address,address,uint256)"(
      caller?: string | null,
      recipient?: string | null,
      amount?: null
    ): TypedEventFilter<
      [string, string, BigNumber],
      { caller: string; recipient: string; amount: BigNumber }
    >;

    LogMintRewards(
      caller?: string | null,
      recipient?: string | null,
      amount?: null
    ): TypedEventFilter<
      [string, string, BigNumber],
      { caller: string; recipient: string; amount: BigNumber }
    >;

    "LogQueueChange(uint8,address)"(
      target?: BigNumberish | null,
      queued?: null
    ): TypedEventFilter<[number, string], { target: number; queued: string }>;

    LogQueueChange(
      target?: BigNumberish | null,
      queued?: null
    ): TypedEventFilter<[number, string], { target: number; queued: string }>;

    "LogRepayDebt(address,address,uint256,uint256)"(
      debtor?: string | null,
      token?: string | null,
      amount?: null,
      value?: null
    ): TypedEventFilter<
      [string, string, BigNumber, BigNumber],
      { debtor: string; token: string; amount: BigNumber; value: BigNumber }
    >;

    LogRepayDebt(
      debtor?: string | null,
      token?: string | null,
      amount?: null,
      value?: null
    ): TypedEventFilter<
      [string, string, BigNumber, BigNumber],
      { debtor: string; token: string; amount: BigNumber; value: BigNumber }
    >;

    "LogUpdateAssets(uint256)"(
      totalAssets?: BigNumberish | null
    ): TypedEventFilter<[BigNumber], { totalAssets: BigNumber }>;

    LogUpdateAssets(
      totalAssets?: BigNumberish | null
    ): TypedEventFilter<[BigNumber], { totalAssets: BigNumber }>;

    "LogWithdraw(address,uint256,uint256)"(
      token?: string | null,
      amount?: null,
      value?: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber],
      { token: string; amount: BigNumber; value: BigNumber }
    >;

    LogWithdraw(
      token?: string | null,
      amount?: null,
      value?: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber],
      { token: string; amount: BigNumber; value: BigNumber }
    >;

    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): TypedEventFilter<
      [string, string],
      { previousOwner: string; newOwner: string }
    >;

    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): TypedEventFilter<
      [string, string],
      { previousOwner: string; newOwner: string }
    >;
  };

  estimateGas: {
    auditAssets(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    bondDeposit(
      amount_: BigNumberish,
      profit_: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    bondQueue(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    bonds(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    collateralManagerQueue(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    collateralManagers(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    collateralTokenQueue(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    collateralTokens(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    debtorBalances(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    debtorQueue(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    debtors(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    deposit(
      token_: string,
      amount_: BigNumberish,
      profit_: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    depositorQueue(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    depositors(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    excessAssets(overrides?: CallOverrides): Promise<BigNumber>;

    incurDebt(
      bond_: string,
      amount_: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    liquidityManagerQueue(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    liquidityManagers(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    manage(
      bond_: string,
      amount_: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    mintRewards(
      recipient_: string,
      amount_: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    queue(
      target_: BigNumberish,
      address_: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    queueLength(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    repayDebtWithCollateral(
      bond_: string,
      amount_: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    repayDebtWithSDOGE(
      amount_: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    rewardManagerQueue(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    rewardManagers(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    sSDOGE(overrides?: CallOverrides): Promise<BigNumber>;

    sSDOGEQueue(overrides?: CallOverrides): Promise<BigNumber>;

    sdoge(overrides?: CallOverrides): Promise<BigNumber>;

    spenderQueue(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    spenders(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    toggle(
      target_: BigNumberish,
      address_: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    totalAssets(overrides?: CallOverrides): Promise<BigNumber>;

    totalDebt(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner_: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    withdraw(
      bond_: string,
      amount_: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    auditAssets(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    bondDeposit(
      amount_: BigNumberish,
      profit_: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    bondQueue(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    bonds(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    collateralManagerQueue(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    collateralManagers(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    collateralTokenQueue(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    collateralTokens(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    debtorBalances(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    debtorQueue(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    debtors(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    deposit(
      token_: string,
      amount_: BigNumberish,
      profit_: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    depositorQueue(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    depositors(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    excessAssets(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    incurDebt(
      bond_: string,
      amount_: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    liquidityManagerQueue(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    liquidityManagers(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    manage(
      bond_: string,
      amount_: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    mintRewards(
      recipient_: string,
      amount_: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    queue(
      target_: BigNumberish,
      address_: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    queueLength(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    repayDebtWithCollateral(
      bond_: string,
      amount_: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    repayDebtWithSDOGE(
      amount_: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    rewardManagerQueue(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    rewardManagers(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    sSDOGE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    sSDOGEQueue(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    sdoge(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    spenderQueue(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    spenders(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    toggle(
      target_: BigNumberish,
      address_: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    totalAssets(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalDebt(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner_: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    withdraw(
      bond_: string,
      amount_: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
