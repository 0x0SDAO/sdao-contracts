/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface VSDOGEOfferingInterface extends ethers.utils.Interface {
  functions: {
    "buyToken(uint256)": FunctionFragment;
    "claimRemaining(address)": FunctionFragment;
    "endBlock()": FunctionFragment;
    "getCapPerBuyer()": FunctionFragment;
    "getRate(uint256)": FunctionFragment;
    "offeringStarted()": FunctionFragment;
    "owner()": FunctionFragment;
    "rate()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "start(uint256,uint256)": FunctionFragment;
    "tokenIn()": FunctionFragment;
    "totalWhiteListed()": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "treasury()": FunctionFragment;
    "vSDOGE()": FunctionFragment;
    "whiteListBuyers(address[])": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "buyToken",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "claimRemaining",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "endBlock", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getCapPerBuyer",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getRate",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "offeringStarted",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(functionFragment: "rate", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "start",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "tokenIn", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "totalWhiteListed",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "treasury", values?: undefined): string;
  encodeFunctionData(functionFragment: "vSDOGE", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "whiteListBuyers",
    values: [string[]]
  ): string;

  decodeFunctionResult(functionFragment: "buyToken", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "claimRemaining",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "endBlock", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getCapPerBuyer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getRate", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "offeringStarted",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "rate", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "start", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "tokenIn", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "totalWhiteListed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "treasury", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "vSDOGE", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "whiteListBuyers",
    data: BytesLike
  ): Result;

  events: {
    "LogStart(uint256,uint256,uint256)": EventFragment;
    "LogWhiteListBuyers(address[])": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "LogStart"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LogWhiteListBuyers"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
}

export type LogStartEvent = TypedEvent<
  [BigNumber, BigNumber, BigNumber] & {
    rate: BigNumber;
    startBlock: BigNumber;
    endBlock: BigNumber;
  }
>;

export type LogWhiteListBuyersEvent = TypedEvent<
  [string[]] & { buyers: string[] }
>;

export type OwnershipTransferredEvent = TypedEvent<
  [string, string] & { previousOwner: string; newOwner: string }
>;

export class VSDOGEOffering extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: VSDOGEOfferingInterface;

  functions: {
    buyToken(
      tokenInAmount_: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    claimRemaining(
      recipient_: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    endBlock(overrides?: CallOverrides): Promise<[BigNumber]>;

    getCapPerBuyer(overrides?: CallOverrides): Promise<[BigNumber]>;

    getRate(
      tokenInAmount_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    offeringStarted(overrides?: CallOverrides): Promise<[boolean]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    rate(overrides?: CallOverrides): Promise<[BigNumber]>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    start(
      rate_: BigNumberish,
      offeringPeriod_: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    tokenIn(overrides?: CallOverrides): Promise<[string]>;

    totalWhiteListed(overrides?: CallOverrides): Promise<[BigNumber]>;

    transferOwnership(
      newOwner_: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    treasury(overrides?: CallOverrides): Promise<[string]>;

    vSDOGE(overrides?: CallOverrides): Promise<[string]>;

    whiteListBuyers(
      buyers_: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  buyToken(
    tokenInAmount_: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  claimRemaining(
    recipient_: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  endBlock(overrides?: CallOverrides): Promise<BigNumber>;

  getCapPerBuyer(overrides?: CallOverrides): Promise<BigNumber>;

  getRate(
    tokenInAmount_: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  offeringStarted(overrides?: CallOverrides): Promise<boolean>;

  owner(overrides?: CallOverrides): Promise<string>;

  rate(overrides?: CallOverrides): Promise<BigNumber>;

  renounceOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  start(
    rate_: BigNumberish,
    offeringPeriod_: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  tokenIn(overrides?: CallOverrides): Promise<string>;

  totalWhiteListed(overrides?: CallOverrides): Promise<BigNumber>;

  transferOwnership(
    newOwner_: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  treasury(overrides?: CallOverrides): Promise<string>;

  vSDOGE(overrides?: CallOverrides): Promise<string>;

  whiteListBuyers(
    buyers_: string[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    buyToken(
      tokenInAmount_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    claimRemaining(
      recipient_: string,
      overrides?: CallOverrides
    ): Promise<void>;

    endBlock(overrides?: CallOverrides): Promise<BigNumber>;

    getCapPerBuyer(overrides?: CallOverrides): Promise<BigNumber>;

    getRate(
      tokenInAmount_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    offeringStarted(overrides?: CallOverrides): Promise<boolean>;

    owner(overrides?: CallOverrides): Promise<string>;

    rate(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    start(
      rate_: BigNumberish,
      offeringPeriod_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    tokenIn(overrides?: CallOverrides): Promise<string>;

    totalWhiteListed(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner_: string,
      overrides?: CallOverrides
    ): Promise<void>;

    treasury(overrides?: CallOverrides): Promise<string>;

    vSDOGE(overrides?: CallOverrides): Promise<string>;

    whiteListBuyers(
      buyers_: string[],
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "LogStart(uint256,uint256,uint256)"(
      rate?: null,
      startBlock?: null,
      endBlock?: null
    ): TypedEventFilter<
      [BigNumber, BigNumber, BigNumber],
      { rate: BigNumber; startBlock: BigNumber; endBlock: BigNumber }
    >;

    LogStart(
      rate?: null,
      startBlock?: null,
      endBlock?: null
    ): TypedEventFilter<
      [BigNumber, BigNumber, BigNumber],
      { rate: BigNumber; startBlock: BigNumber; endBlock: BigNumber }
    >;

    "LogWhiteListBuyers(address[])"(
      buyers?: null
    ): TypedEventFilter<[string[]], { buyers: string[] }>;

    LogWhiteListBuyers(
      buyers?: null
    ): TypedEventFilter<[string[]], { buyers: string[] }>;

    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): TypedEventFilter<
      [string, string],
      { previousOwner: string; newOwner: string }
    >;

    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): TypedEventFilter<
      [string, string],
      { previousOwner: string; newOwner: string }
    >;
  };

  estimateGas: {
    buyToken(
      tokenInAmount_: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    claimRemaining(
      recipient_: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    endBlock(overrides?: CallOverrides): Promise<BigNumber>;

    getCapPerBuyer(overrides?: CallOverrides): Promise<BigNumber>;

    getRate(
      tokenInAmount_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    offeringStarted(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    rate(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    start(
      rate_: BigNumberish,
      offeringPeriod_: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    tokenIn(overrides?: CallOverrides): Promise<BigNumber>;

    totalWhiteListed(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner_: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    treasury(overrides?: CallOverrides): Promise<BigNumber>;

    vSDOGE(overrides?: CallOverrides): Promise<BigNumber>;

    whiteListBuyers(
      buyers_: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    buyToken(
      tokenInAmount_: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    claimRemaining(
      recipient_: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    endBlock(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getCapPerBuyer(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getRate(
      tokenInAmount_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    offeringStarted(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    rate(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    start(
      rate_: BigNumberish,
      offeringPeriod_: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    tokenIn(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalWhiteListed(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner_: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    treasury(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    vSDOGE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    whiteListBuyers(
      buyers_: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
