/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface SDOGEBondInterface extends ethers.utils.Interface {
  functions: {
    "adjustment()": FunctionFragment;
    "bondCalculator()": FunctionFragment;
    "bondInfo(address)": FunctionFragment;
    "bondPrice()": FunctionFragment;
    "bondPriceInUSD()": FunctionFragment;
    "currentDebt()": FunctionFragment;
    "debtDecay()": FunctionFragment;
    "debtRatio()": FunctionFragment;
    "deposit(uint256,uint256,address,bytes32)": FunctionFragment;
    "initializeBondTerms(uint256,uint256,uint256,uint256,uint256,uint256,uint256)": FunctionFragment;
    "isLiquidityBond()": FunctionFragment;
    "lastDecay()": FunctionFragment;
    "maxPayout()": FunctionFragment;
    "owner()": FunctionFragment;
    "payoutFor(uint256)": FunctionFragment;
    "pendingPayoutFor(address)": FunctionFragment;
    "percentVestedFor(address)": FunctionFragment;
    "recoverLostToken(address)": FunctionFragment;
    "redeem(address,bool)": FunctionFragment;
    "referral()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "reservoir()": FunctionFragment;
    "sdoge()": FunctionFragment;
    "sdogeValue(uint256)": FunctionFragment;
    "setAdjustment(bool,uint256,uint256,uint256)": FunctionFragment;
    "setBondTerms(uint8,uint256)": FunctionFragment;
    "setReferral(address)": FunctionFragment;
    "setStaking(address)": FunctionFragment;
    "staking()": FunctionFragment;
    "standardizedDebtRatio()": FunctionFragment;
    "terms()": FunctionFragment;
    "tokenIn()": FunctionFragment;
    "totalDebt()": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "treasury()": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "adjustment",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "bondCalculator",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "bondInfo", values: [string]): string;
  encodeFunctionData(functionFragment: "bondPrice", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "bondPriceInUSD",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "currentDebt",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "debtDecay", values?: undefined): string;
  encodeFunctionData(functionFragment: "debtRatio", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "deposit",
    values: [BigNumberish, BigNumberish, string, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "initializeBondTerms",
    values: [
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "isLiquidityBond",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "lastDecay", values?: undefined): string;
  encodeFunctionData(functionFragment: "maxPayout", values?: undefined): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "payoutFor",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "pendingPayoutFor",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "percentVestedFor",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "recoverLostToken",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "redeem",
    values: [string, boolean]
  ): string;
  encodeFunctionData(functionFragment: "referral", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "reservoir", values?: undefined): string;
  encodeFunctionData(functionFragment: "sdoge", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "sdogeValue",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setAdjustment",
    values: [boolean, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setBondTerms",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "setReferral", values: [string]): string;
  encodeFunctionData(functionFragment: "setStaking", values: [string]): string;
  encodeFunctionData(functionFragment: "staking", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "standardizedDebtRatio",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "terms", values?: undefined): string;
  encodeFunctionData(functionFragment: "tokenIn", values?: undefined): string;
  encodeFunctionData(functionFragment: "totalDebt", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "treasury", values?: undefined): string;

  decodeFunctionResult(functionFragment: "adjustment", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "bondCalculator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "bondInfo", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "bondPrice", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "bondPriceInUSD",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "currentDebt",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "debtDecay", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "debtRatio", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "deposit", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "initializeBondTerms",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isLiquidityBond",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "lastDecay", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "maxPayout", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "payoutFor", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "pendingPayoutFor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "percentVestedFor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "recoverLostToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "redeem", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "referral", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "reservoir", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "sdoge", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "sdogeValue", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setAdjustment",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setBondTerms",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setReferral",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setStaking", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "staking", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "standardizedDebtRatio",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "terms", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "tokenIn", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "totalDebt", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "treasury", data: BytesLike): Result;

  events: {
    "LogBondCreated(uint256,uint256,uint256,uint256)": EventFragment;
    "LogBondPriceChanged(uint256,uint256,uint256)": EventFragment;
    "LogBondRedeemed(address,uint256,uint256)": EventFragment;
    "LogControlVariableAdjustment(uint256,uint256,uint256,bool)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "LogBondCreated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LogBondPriceChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LogBondRedeemed"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "LogControlVariableAdjustment"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
}

export type LogBondCreatedEvent = TypedEvent<
  [BigNumber, BigNumber, BigNumber, BigNumber] & {
    deposit: BigNumber;
    payout: BigNumber;
    expires: BigNumber;
    priceInUSD: BigNumber;
  }
>;

export type LogBondPriceChangedEvent = TypedEvent<
  [BigNumber, BigNumber, BigNumber] & {
    priceInUSD: BigNumber;
    internalPrice: BigNumber;
    debtRatio: BigNumber;
  }
>;

export type LogBondRedeemedEvent = TypedEvent<
  [string, BigNumber, BigNumber] & {
    recipient: string;
    payout: BigNumber;
    remaining: BigNumber;
  }
>;

export type LogControlVariableAdjustmentEvent = TypedEvent<
  [BigNumber, BigNumber, BigNumber, boolean] & {
    initialBCV: BigNumber;
    newBCV: BigNumber;
    adjustment: BigNumber;
    addition: boolean;
  }
>;

export type OwnershipTransferredEvent = TypedEvent<
  [string, string] & { previousOwner: string; newOwner: string }
>;

export class SDOGEBond extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: SDOGEBondInterface;

  functions: {
    adjustment(
      overrides?: CallOverrides
    ): Promise<
      [boolean, BigNumber, BigNumber, BigNumber, BigNumber] & {
        add: boolean;
        rate: BigNumber;
        target: BigNumber;
        buffer: BigNumber;
        lastBlock: BigNumber;
      }
    >;

    bondCalculator(overrides?: CallOverrides): Promise<[string]>;

    bondInfo(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber] & {
        payout: BigNumber;
        period: BigNumber;
        lastBlock: BigNumber;
        pricePaid: BigNumber;
      }
    >;

    bondPrice(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { price_: BigNumber }>;

    bondPriceInUSD(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { price_: BigNumber }>;

    currentDebt(overrides?: CallOverrides): Promise<[BigNumber]>;

    debtDecay(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { decay_: BigNumber }>;

    debtRatio(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { debtRatio_: BigNumber }>;

    deposit(
      amount_: BigNumberish,
      maxPrice_: BigNumberish,
      depositor_: string,
      referralCode_: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    initializeBondTerms(
      controlVariable_: BigNumberish,
      period_: BigNumberish,
      minPrice_: BigNumberish,
      maxPayout_: BigNumberish,
      fee_: BigNumberish,
      maxDebt_: BigNumberish,
      initialDebt_: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    isLiquidityBond(overrides?: CallOverrides): Promise<[boolean]>;

    lastDecay(overrides?: CallOverrides): Promise<[BigNumber]>;

    maxPayout(overrides?: CallOverrides): Promise<[BigNumber]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    payoutFor(
      amount_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { payout_: BigNumber; value_: BigNumber }
    >;

    pendingPayoutFor(
      depositor_: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { pendingPayout_: BigNumber }>;

    percentVestedFor(
      depositor_: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { percentVested_: BigNumber }>;

    recoverLostToken(
      token_: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    redeem(
      recipient_: string,
      stake_: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    referral(overrides?: CallOverrides): Promise<[string]>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    reservoir(overrides?: CallOverrides): Promise<[string]>;

    sdoge(overrides?: CallOverrides): Promise<[string]>;

    sdogeValue(
      amount_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber, string] & { value_: BigNumber; token_: string }>;

    setAdjustment(
      addition_: boolean,
      increment_: BigNumberish,
      target_: BigNumberish,
      buffer_: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setBondTerms(
      parameter_: BigNumberish,
      input_: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setReferral(
      referral_: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setStaking(
      staking_: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    staking(overrides?: CallOverrides): Promise<[string]>;

    standardizedDebtRatio(overrides?: CallOverrides): Promise<[BigNumber]>;

    terms(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
        controlVariable: BigNumber;
        period: BigNumber;
        minPrice: BigNumber;
        maxPayout: BigNumber;
        fee: BigNumber;
        maxDebt: BigNumber;
      }
    >;

    tokenIn(overrides?: CallOverrides): Promise<[string]>;

    totalDebt(overrides?: CallOverrides): Promise<[BigNumber]>;

    transferOwnership(
      newOwner_: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    treasury(overrides?: CallOverrides): Promise<[string]>;
  };

  adjustment(
    overrides?: CallOverrides
  ): Promise<
    [boolean, BigNumber, BigNumber, BigNumber, BigNumber] & {
      add: boolean;
      rate: BigNumber;
      target: BigNumber;
      buffer: BigNumber;
      lastBlock: BigNumber;
    }
  >;

  bondCalculator(overrides?: CallOverrides): Promise<string>;

  bondInfo(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber, BigNumber] & {
      payout: BigNumber;
      period: BigNumber;
      lastBlock: BigNumber;
      pricePaid: BigNumber;
    }
  >;

  bondPrice(overrides?: CallOverrides): Promise<BigNumber>;

  bondPriceInUSD(overrides?: CallOverrides): Promise<BigNumber>;

  currentDebt(overrides?: CallOverrides): Promise<BigNumber>;

  debtDecay(overrides?: CallOverrides): Promise<BigNumber>;

  debtRatio(overrides?: CallOverrides): Promise<BigNumber>;

  deposit(
    amount_: BigNumberish,
    maxPrice_: BigNumberish,
    depositor_: string,
    referralCode_: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  initializeBondTerms(
    controlVariable_: BigNumberish,
    period_: BigNumberish,
    minPrice_: BigNumberish,
    maxPayout_: BigNumberish,
    fee_: BigNumberish,
    maxDebt_: BigNumberish,
    initialDebt_: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  isLiquidityBond(overrides?: CallOverrides): Promise<boolean>;

  lastDecay(overrides?: CallOverrides): Promise<BigNumber>;

  maxPayout(overrides?: CallOverrides): Promise<BigNumber>;

  owner(overrides?: CallOverrides): Promise<string>;

  payoutFor(
    amount_: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber] & { payout_: BigNumber; value_: BigNumber }
  >;

  pendingPayoutFor(
    depositor_: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  percentVestedFor(
    depositor_: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  recoverLostToken(
    token_: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  redeem(
    recipient_: string,
    stake_: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  referral(overrides?: CallOverrides): Promise<string>;

  renounceOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  reservoir(overrides?: CallOverrides): Promise<string>;

  sdoge(overrides?: CallOverrides): Promise<string>;

  sdogeValue(
    amount_: BigNumberish,
    overrides?: CallOverrides
  ): Promise<[BigNumber, string] & { value_: BigNumber; token_: string }>;

  setAdjustment(
    addition_: boolean,
    increment_: BigNumberish,
    target_: BigNumberish,
    buffer_: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setBondTerms(
    parameter_: BigNumberish,
    input_: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setReferral(
    referral_: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setStaking(
    staking_: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  staking(overrides?: CallOverrides): Promise<string>;

  standardizedDebtRatio(overrides?: CallOverrides): Promise<BigNumber>;

  terms(
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
      controlVariable: BigNumber;
      period: BigNumber;
      minPrice: BigNumber;
      maxPayout: BigNumber;
      fee: BigNumber;
      maxDebt: BigNumber;
    }
  >;

  tokenIn(overrides?: CallOverrides): Promise<string>;

  totalDebt(overrides?: CallOverrides): Promise<BigNumber>;

  transferOwnership(
    newOwner_: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  treasury(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    adjustment(
      overrides?: CallOverrides
    ): Promise<
      [boolean, BigNumber, BigNumber, BigNumber, BigNumber] & {
        add: boolean;
        rate: BigNumber;
        target: BigNumber;
        buffer: BigNumber;
        lastBlock: BigNumber;
      }
    >;

    bondCalculator(overrides?: CallOverrides): Promise<string>;

    bondInfo(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber] & {
        payout: BigNumber;
        period: BigNumber;
        lastBlock: BigNumber;
        pricePaid: BigNumber;
      }
    >;

    bondPrice(overrides?: CallOverrides): Promise<BigNumber>;

    bondPriceInUSD(overrides?: CallOverrides): Promise<BigNumber>;

    currentDebt(overrides?: CallOverrides): Promise<BigNumber>;

    debtDecay(overrides?: CallOverrides): Promise<BigNumber>;

    debtRatio(overrides?: CallOverrides): Promise<BigNumber>;

    deposit(
      amount_: BigNumberish,
      maxPrice_: BigNumberish,
      depositor_: string,
      referralCode_: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    initializeBondTerms(
      controlVariable_: BigNumberish,
      period_: BigNumberish,
      minPrice_: BigNumberish,
      maxPayout_: BigNumberish,
      fee_: BigNumberish,
      maxDebt_: BigNumberish,
      initialDebt_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    isLiquidityBond(overrides?: CallOverrides): Promise<boolean>;

    lastDecay(overrides?: CallOverrides): Promise<BigNumber>;

    maxPayout(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<string>;

    payoutFor(
      amount_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { payout_: BigNumber; value_: BigNumber }
    >;

    pendingPayoutFor(
      depositor_: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    percentVestedFor(
      depositor_: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    recoverLostToken(
      token_: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    redeem(
      recipient_: string,
      stake_: boolean,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    referral(overrides?: CallOverrides): Promise<string>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    reservoir(overrides?: CallOverrides): Promise<string>;

    sdoge(overrides?: CallOverrides): Promise<string>;

    sdogeValue(
      amount_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber, string] & { value_: BigNumber; token_: string }>;

    setAdjustment(
      addition_: boolean,
      increment_: BigNumberish,
      target_: BigNumberish,
      buffer_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setBondTerms(
      parameter_: BigNumberish,
      input_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setReferral(referral_: string, overrides?: CallOverrides): Promise<void>;

    setStaking(staking_: string, overrides?: CallOverrides): Promise<void>;

    staking(overrides?: CallOverrides): Promise<string>;

    standardizedDebtRatio(overrides?: CallOverrides): Promise<BigNumber>;

    terms(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
        controlVariable: BigNumber;
        period: BigNumber;
        minPrice: BigNumber;
        maxPayout: BigNumber;
        fee: BigNumber;
        maxDebt: BigNumber;
      }
    >;

    tokenIn(overrides?: CallOverrides): Promise<string>;

    totalDebt(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner_: string,
      overrides?: CallOverrides
    ): Promise<void>;

    treasury(overrides?: CallOverrides): Promise<string>;
  };

  filters: {
    "LogBondCreated(uint256,uint256,uint256,uint256)"(
      deposit?: null,
      payout?: BigNumberish | null,
      expires?: BigNumberish | null,
      priceInUSD?: BigNumberish | null
    ): TypedEventFilter<
      [BigNumber, BigNumber, BigNumber, BigNumber],
      {
        deposit: BigNumber;
        payout: BigNumber;
        expires: BigNumber;
        priceInUSD: BigNumber;
      }
    >;

    LogBondCreated(
      deposit?: null,
      payout?: BigNumberish | null,
      expires?: BigNumberish | null,
      priceInUSD?: BigNumberish | null
    ): TypedEventFilter<
      [BigNumber, BigNumber, BigNumber, BigNumber],
      {
        deposit: BigNumber;
        payout: BigNumber;
        expires: BigNumber;
        priceInUSD: BigNumber;
      }
    >;

    "LogBondPriceChanged(uint256,uint256,uint256)"(
      priceInUSD?: BigNumberish | null,
      internalPrice?: BigNumberish | null,
      debtRatio?: BigNumberish | null
    ): TypedEventFilter<
      [BigNumber, BigNumber, BigNumber],
      { priceInUSD: BigNumber; internalPrice: BigNumber; debtRatio: BigNumber }
    >;

    LogBondPriceChanged(
      priceInUSD?: BigNumberish | null,
      internalPrice?: BigNumberish | null,
      debtRatio?: BigNumberish | null
    ): TypedEventFilter<
      [BigNumber, BigNumber, BigNumber],
      { priceInUSD: BigNumber; internalPrice: BigNumber; debtRatio: BigNumber }
    >;

    "LogBondRedeemed(address,uint256,uint256)"(
      recipient?: string | null,
      payout?: null,
      remaining?: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber],
      { recipient: string; payout: BigNumber; remaining: BigNumber }
    >;

    LogBondRedeemed(
      recipient?: string | null,
      payout?: null,
      remaining?: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber],
      { recipient: string; payout: BigNumber; remaining: BigNumber }
    >;

    "LogControlVariableAdjustment(uint256,uint256,uint256,bool)"(
      initialBCV?: null,
      newBCV?: null,
      adjustment?: null,
      addition?: null
    ): TypedEventFilter<
      [BigNumber, BigNumber, BigNumber, boolean],
      {
        initialBCV: BigNumber;
        newBCV: BigNumber;
        adjustment: BigNumber;
        addition: boolean;
      }
    >;

    LogControlVariableAdjustment(
      initialBCV?: null,
      newBCV?: null,
      adjustment?: null,
      addition?: null
    ): TypedEventFilter<
      [BigNumber, BigNumber, BigNumber, boolean],
      {
        initialBCV: BigNumber;
        newBCV: BigNumber;
        adjustment: BigNumber;
        addition: boolean;
      }
    >;

    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): TypedEventFilter<
      [string, string],
      { previousOwner: string; newOwner: string }
    >;

    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): TypedEventFilter<
      [string, string],
      { previousOwner: string; newOwner: string }
    >;
  };

  estimateGas: {
    adjustment(overrides?: CallOverrides): Promise<BigNumber>;

    bondCalculator(overrides?: CallOverrides): Promise<BigNumber>;

    bondInfo(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    bondPrice(overrides?: CallOverrides): Promise<BigNumber>;

    bondPriceInUSD(overrides?: CallOverrides): Promise<BigNumber>;

    currentDebt(overrides?: CallOverrides): Promise<BigNumber>;

    debtDecay(overrides?: CallOverrides): Promise<BigNumber>;

    debtRatio(overrides?: CallOverrides): Promise<BigNumber>;

    deposit(
      amount_: BigNumberish,
      maxPrice_: BigNumberish,
      depositor_: string,
      referralCode_: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    initializeBondTerms(
      controlVariable_: BigNumberish,
      period_: BigNumberish,
      minPrice_: BigNumberish,
      maxPayout_: BigNumberish,
      fee_: BigNumberish,
      maxDebt_: BigNumberish,
      initialDebt_: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    isLiquidityBond(overrides?: CallOverrides): Promise<BigNumber>;

    lastDecay(overrides?: CallOverrides): Promise<BigNumber>;

    maxPayout(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    payoutFor(
      amount_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    pendingPayoutFor(
      depositor_: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    percentVestedFor(
      depositor_: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    recoverLostToken(
      token_: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    redeem(
      recipient_: string,
      stake_: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    referral(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    reservoir(overrides?: CallOverrides): Promise<BigNumber>;

    sdoge(overrides?: CallOverrides): Promise<BigNumber>;

    sdogeValue(
      amount_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    setAdjustment(
      addition_: boolean,
      increment_: BigNumberish,
      target_: BigNumberish,
      buffer_: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setBondTerms(
      parameter_: BigNumberish,
      input_: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setReferral(
      referral_: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setStaking(
      staking_: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    staking(overrides?: CallOverrides): Promise<BigNumber>;

    standardizedDebtRatio(overrides?: CallOverrides): Promise<BigNumber>;

    terms(overrides?: CallOverrides): Promise<BigNumber>;

    tokenIn(overrides?: CallOverrides): Promise<BigNumber>;

    totalDebt(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner_: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    treasury(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    adjustment(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    bondCalculator(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    bondInfo(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    bondPrice(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    bondPriceInUSD(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    currentDebt(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    debtDecay(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    debtRatio(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    deposit(
      amount_: BigNumberish,
      maxPrice_: BigNumberish,
      depositor_: string,
      referralCode_: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    initializeBondTerms(
      controlVariable_: BigNumberish,
      period_: BigNumberish,
      minPrice_: BigNumberish,
      maxPayout_: BigNumberish,
      fee_: BigNumberish,
      maxDebt_: BigNumberish,
      initialDebt_: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    isLiquidityBond(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    lastDecay(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    maxPayout(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    payoutFor(
      amount_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    pendingPayoutFor(
      depositor_: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    percentVestedFor(
      depositor_: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    recoverLostToken(
      token_: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    redeem(
      recipient_: string,
      stake_: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    referral(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    reservoir(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    sdoge(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    sdogeValue(
      amount_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    setAdjustment(
      addition_: boolean,
      increment_: BigNumberish,
      target_: BigNumberish,
      buffer_: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setBondTerms(
      parameter_: BigNumberish,
      input_: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setReferral(
      referral_: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setStaking(
      staking_: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    staking(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    standardizedDebtRatio(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    terms(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    tokenIn(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalDebt(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner_: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    treasury(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
