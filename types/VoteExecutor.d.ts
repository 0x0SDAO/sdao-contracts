/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface VoteExecutorInterface extends ethers.utils.Interface {
  functions: {
    "_newOwner()": FunctionFragment;
    "_owner()": FunctionFragment;
    "cancelUpdate(uint256)": FunctionFragment;
    "emergencyExecDelay()": FunctionFragment;
    "execUpdate(uint256)": FunctionFragment;
    "executor()": FunctionFragment;
    "pullManagement()": FunctionFragment;
    "pushManagement(address)": FunctionFragment;
    "pushUpdate(address,bytes)": FunctionFragment;
    "renounceManagement()": FunctionFragment;
    "safetyExecDelay()": FunctionFragment;
    "updateCount()": FunctionFragment;
    "updateEmergencyExecDelay(uint256)": FunctionFragment;
    "updateSafetyExecDelay(uint256)": FunctionFragment;
    "updates(uint256)": FunctionFragment;
    "updatesCallData(uint256)": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "_newOwner", values?: undefined): string;
  encodeFunctionData(functionFragment: "_owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "cancelUpdate",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "emergencyExecDelay",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "execUpdate",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "executor", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "pullManagement",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "pushManagement",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "pushUpdate",
    values: [string, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceManagement",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "safetyExecDelay",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "updateCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "updateEmergencyExecDelay",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "updateSafetyExecDelay",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "updates",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "updatesCallData",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "_newOwner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "_owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "cancelUpdate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "emergencyExecDelay",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "execUpdate", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "executor", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "pullManagement",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "pushManagement",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "pushUpdate", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceManagement",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "safetyExecDelay",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateEmergencyExecDelay",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateSafetyExecDelay",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "updates", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "updatesCallData",
    data: BytesLike
  ): Result;

  events: {
    "CancelUpdate(uint256)": EventFragment;
    "EmergencyExecDelayUpdated(uint256)": EventFragment;
    "OwnershipPulled(address,address)": EventFragment;
    "OwnershipPushed(address,address)": EventFragment;
    "SafetyExecDelayUpdated(uint256)": EventFragment;
    "UpdateExecuted(uint256)": EventFragment;
    "UpdatePushed(uint256,address,uint256,bool,bytes)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "CancelUpdate"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "EmergencyExecDelayUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipPulled"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipPushed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SafetyExecDelayUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UpdateExecuted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UpdatePushed"): EventFragment;
}

export type CancelUpdateEvent = TypedEvent<[BigNumber] & { index: BigNumber }>;

export type EmergencyExecDelayUpdatedEvent = TypedEvent<
  [BigNumber] & { newDelay: BigNumber }
>;

export type OwnershipPulledEvent = TypedEvent<
  [string, string] & { previousOwner: string; newOwner: string }
>;

export type OwnershipPushedEvent = TypedEvent<
  [string, string] & { previousOwner: string; newOwner: string }
>;

export type SafetyExecDelayUpdatedEvent = TypedEvent<
  [BigNumber] & { newDelay: BigNumber }
>;

export type UpdateExecutedEvent = TypedEvent<
  [BigNumber] & { index: BigNumber }
>;

export type UpdatePushedEvent = TypedEvent<
  [BigNumber, string, BigNumber, boolean, string] & {
    index: BigNumber;
    target: string;
    execTime: BigNumber;
    pushedByExecutor: boolean;
    updateCalldata: string;
  }
>;

export class VoteExecutor extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: VoteExecutorInterface;

  functions: {
    _newOwner(overrides?: CallOverrides): Promise<[string]>;

    _owner(overrides?: CallOverrides): Promise<[string]>;

    cancelUpdate(
      index: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    emergencyExecDelay(overrides?: CallOverrides): Promise<[BigNumber]>;

    execUpdate(
      index: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    executor(overrides?: CallOverrides): Promise<[string]>;

    pullManagement(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    pushManagement(
      newOwner_: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    pushUpdate(
      target: string,
      updateCalldata: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    renounceManagement(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    safetyExecDelay(overrides?: CallOverrides): Promise<[BigNumber]>;

    updateCount(overrides?: CallOverrides): Promise<[BigNumber]>;

    updateEmergencyExecDelay(
      delay: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    updateSafetyExecDelay(
      delay: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    updates(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, boolean, boolean] & {
        execTime: BigNumber;
        pushedByExecutor: boolean;
        cancelled: boolean;
      }
    >;

    updatesCallData(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string, string] & { target: string; updateCalldata: string }>;
  };

  _newOwner(overrides?: CallOverrides): Promise<string>;

  _owner(overrides?: CallOverrides): Promise<string>;

  cancelUpdate(
    index: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  emergencyExecDelay(overrides?: CallOverrides): Promise<BigNumber>;

  execUpdate(
    index: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  executor(overrides?: CallOverrides): Promise<string>;

  pullManagement(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  pushManagement(
    newOwner_: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  pushUpdate(
    target: string,
    updateCalldata: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  renounceManagement(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  safetyExecDelay(overrides?: CallOverrides): Promise<BigNumber>;

  updateCount(overrides?: CallOverrides): Promise<BigNumber>;

  updateEmergencyExecDelay(
    delay: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  updateSafetyExecDelay(
    delay: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  updates(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, boolean, boolean] & {
      execTime: BigNumber;
      pushedByExecutor: boolean;
      cancelled: boolean;
    }
  >;

  updatesCallData(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<[string, string] & { target: string; updateCalldata: string }>;

  callStatic: {
    _newOwner(overrides?: CallOverrides): Promise<string>;

    _owner(overrides?: CallOverrides): Promise<string>;

    cancelUpdate(index: BigNumberish, overrides?: CallOverrides): Promise<void>;

    emergencyExecDelay(overrides?: CallOverrides): Promise<BigNumber>;

    execUpdate(index: BigNumberish, overrides?: CallOverrides): Promise<void>;

    executor(overrides?: CallOverrides): Promise<string>;

    pullManagement(overrides?: CallOverrides): Promise<void>;

    pushManagement(newOwner_: string, overrides?: CallOverrides): Promise<void>;

    pushUpdate(
      target: string,
      updateCalldata: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    renounceManagement(overrides?: CallOverrides): Promise<void>;

    safetyExecDelay(overrides?: CallOverrides): Promise<BigNumber>;

    updateCount(overrides?: CallOverrides): Promise<BigNumber>;

    updateEmergencyExecDelay(
      delay: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    updateSafetyExecDelay(
      delay: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    updates(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, boolean, boolean] & {
        execTime: BigNumber;
        pushedByExecutor: boolean;
        cancelled: boolean;
      }
    >;

    updatesCallData(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string, string] & { target: string; updateCalldata: string }>;
  };

  filters: {
    "CancelUpdate(uint256)"(
      index?: BigNumberish | null
    ): TypedEventFilter<[BigNumber], { index: BigNumber }>;

    CancelUpdate(
      index?: BigNumberish | null
    ): TypedEventFilter<[BigNumber], { index: BigNumber }>;

    "EmergencyExecDelayUpdated(uint256)"(
      newDelay?: null
    ): TypedEventFilter<[BigNumber], { newDelay: BigNumber }>;

    EmergencyExecDelayUpdated(
      newDelay?: null
    ): TypedEventFilter<[BigNumber], { newDelay: BigNumber }>;

    "OwnershipPulled(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): TypedEventFilter<
      [string, string],
      { previousOwner: string; newOwner: string }
    >;

    OwnershipPulled(
      previousOwner?: string | null,
      newOwner?: string | null
    ): TypedEventFilter<
      [string, string],
      { previousOwner: string; newOwner: string }
    >;

    "OwnershipPushed(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): TypedEventFilter<
      [string, string],
      { previousOwner: string; newOwner: string }
    >;

    OwnershipPushed(
      previousOwner?: string | null,
      newOwner?: string | null
    ): TypedEventFilter<
      [string, string],
      { previousOwner: string; newOwner: string }
    >;

    "SafetyExecDelayUpdated(uint256)"(
      newDelay?: null
    ): TypedEventFilter<[BigNumber], { newDelay: BigNumber }>;

    SafetyExecDelayUpdated(
      newDelay?: null
    ): TypedEventFilter<[BigNumber], { newDelay: BigNumber }>;

    "UpdateExecuted(uint256)"(
      index?: BigNumberish | null
    ): TypedEventFilter<[BigNumber], { index: BigNumber }>;

    UpdateExecuted(
      index?: BigNumberish | null
    ): TypedEventFilter<[BigNumber], { index: BigNumber }>;

    "UpdatePushed(uint256,address,uint256,bool,bytes)"(
      index?: BigNumberish | null,
      target?: string | null,
      execTime?: BigNumberish | null,
      pushedByExecutor?: null,
      updateCalldata?: null
    ): TypedEventFilter<
      [BigNumber, string, BigNumber, boolean, string],
      {
        index: BigNumber;
        target: string;
        execTime: BigNumber;
        pushedByExecutor: boolean;
        updateCalldata: string;
      }
    >;

    UpdatePushed(
      index?: BigNumberish | null,
      target?: string | null,
      execTime?: BigNumberish | null,
      pushedByExecutor?: null,
      updateCalldata?: null
    ): TypedEventFilter<
      [BigNumber, string, BigNumber, boolean, string],
      {
        index: BigNumber;
        target: string;
        execTime: BigNumber;
        pushedByExecutor: boolean;
        updateCalldata: string;
      }
    >;
  };

  estimateGas: {
    _newOwner(overrides?: CallOverrides): Promise<BigNumber>;

    _owner(overrides?: CallOverrides): Promise<BigNumber>;

    cancelUpdate(
      index: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    emergencyExecDelay(overrides?: CallOverrides): Promise<BigNumber>;

    execUpdate(
      index: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    executor(overrides?: CallOverrides): Promise<BigNumber>;

    pullManagement(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    pushManagement(
      newOwner_: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    pushUpdate(
      target: string,
      updateCalldata: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    renounceManagement(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    safetyExecDelay(overrides?: CallOverrides): Promise<BigNumber>;

    updateCount(overrides?: CallOverrides): Promise<BigNumber>;

    updateEmergencyExecDelay(
      delay: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    updateSafetyExecDelay(
      delay: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    updates(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    updatesCallData(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    _newOwner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    _owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    cancelUpdate(
      index: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    emergencyExecDelay(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    execUpdate(
      index: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    executor(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pullManagement(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    pushManagement(
      newOwner_: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    pushUpdate(
      target: string,
      updateCalldata: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    renounceManagement(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    safetyExecDelay(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    updateCount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    updateEmergencyExecDelay(
      delay: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    updateSafetyExecDelay(
      delay: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    updates(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    updatesCallData(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
