/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface ScholarDAOTeamTimelockInterface extends ethers.utils.Interface {
  functions: {
    "RELEASE_INTERVAL()": FunctionFragment;
    "RELEASE_PERCENTAGE()": FunctionFragment;
    "baseTokenAmount()": FunctionFragment;
    "beneficiary()": FunctionFragment;
    "getReleaseAmount()": FunctionFragment;
    "nextWithdraw()": FunctionFragment;
    "release()": FunctionFragment;
    "releaseAmount()": FunctionFragment;
    "token()": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "RELEASE_INTERVAL",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "RELEASE_PERCENTAGE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "baseTokenAmount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "beneficiary",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getReleaseAmount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "nextWithdraw",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "release", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "releaseAmount",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "token", values?: undefined): string;

  decodeFunctionResult(
    functionFragment: "RELEASE_INTERVAL",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "RELEASE_PERCENTAGE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "baseTokenAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "beneficiary",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getReleaseAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "nextWithdraw",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "release", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "releaseAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "token", data: BytesLike): Result;

  events: {
    "TeamTokensWithdrawn(uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "TeamTokensWithdrawn"): EventFragment;
}

export type TeamTokensWithdrawnEvent = TypedEvent<
  [BigNumber] & { amount: BigNumber }
>;

export class ScholarDAOTeamTimelock extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: ScholarDAOTeamTimelockInterface;

  functions: {
    RELEASE_INTERVAL(overrides?: CallOverrides): Promise<[BigNumber]>;

    RELEASE_PERCENTAGE(overrides?: CallOverrides): Promise<[BigNumber]>;

    baseTokenAmount(overrides?: CallOverrides): Promise<[BigNumber]>;

    beneficiary(overrides?: CallOverrides): Promise<[string]>;

    getReleaseAmount(overrides?: CallOverrides): Promise<[BigNumber]>;

    nextWithdraw(overrides?: CallOverrides): Promise<[BigNumber]>;

    release(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    releaseAmount(overrides?: CallOverrides): Promise<[BigNumber]>;

    token(overrides?: CallOverrides): Promise<[string]>;
  };

  RELEASE_INTERVAL(overrides?: CallOverrides): Promise<BigNumber>;

  RELEASE_PERCENTAGE(overrides?: CallOverrides): Promise<BigNumber>;

  baseTokenAmount(overrides?: CallOverrides): Promise<BigNumber>;

  beneficiary(overrides?: CallOverrides): Promise<string>;

  getReleaseAmount(overrides?: CallOverrides): Promise<BigNumber>;

  nextWithdraw(overrides?: CallOverrides): Promise<BigNumber>;

  release(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  releaseAmount(overrides?: CallOverrides): Promise<BigNumber>;

  token(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    RELEASE_INTERVAL(overrides?: CallOverrides): Promise<BigNumber>;

    RELEASE_PERCENTAGE(overrides?: CallOverrides): Promise<BigNumber>;

    baseTokenAmount(overrides?: CallOverrides): Promise<BigNumber>;

    beneficiary(overrides?: CallOverrides): Promise<string>;

    getReleaseAmount(overrides?: CallOverrides): Promise<BigNumber>;

    nextWithdraw(overrides?: CallOverrides): Promise<BigNumber>;

    release(overrides?: CallOverrides): Promise<void>;

    releaseAmount(overrides?: CallOverrides): Promise<BigNumber>;

    token(overrides?: CallOverrides): Promise<string>;
  };

  filters: {
    "TeamTokensWithdrawn(uint256)"(
      amount?: BigNumberish | null
    ): TypedEventFilter<[BigNumber], { amount: BigNumber }>;

    TeamTokensWithdrawn(
      amount?: BigNumberish | null
    ): TypedEventFilter<[BigNumber], { amount: BigNumber }>;
  };

  estimateGas: {
    RELEASE_INTERVAL(overrides?: CallOverrides): Promise<BigNumber>;

    RELEASE_PERCENTAGE(overrides?: CallOverrides): Promise<BigNumber>;

    baseTokenAmount(overrides?: CallOverrides): Promise<BigNumber>;

    beneficiary(overrides?: CallOverrides): Promise<BigNumber>;

    getReleaseAmount(overrides?: CallOverrides): Promise<BigNumber>;

    nextWithdraw(overrides?: CallOverrides): Promise<BigNumber>;

    release(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    releaseAmount(overrides?: CallOverrides): Promise<BigNumber>;

    token(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    RELEASE_INTERVAL(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    RELEASE_PERCENTAGE(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    baseTokenAmount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    beneficiary(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getReleaseAmount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    nextWithdraw(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    release(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    releaseAmount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    token(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
