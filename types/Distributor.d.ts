/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface DistributorInterface extends ethers.utils.Interface {
  functions: {
    "addRecipient(address,uint256)": FunctionFragment;
    "adjustments(uint256)": FunctionFragment;
    "distribute()": FunctionFragment;
    "epochLength()": FunctionFragment;
    "info(uint256)": FunctionFragment;
    "nextEpochBlock()": FunctionFragment;
    "nextRewardAt(uint256)": FunctionFragment;
    "nextRewardFor(address)": FunctionFragment;
    "owner()": FunctionFragment;
    "removeRecipient(uint256,address)": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "reservoir()": FunctionFragment;
    "sdoge()": FunctionFragment;
    "setAdjustment(uint256,bool,uint256,uint256)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "addRecipient",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "adjustments",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "distribute",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "epochLength",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "info", values: [BigNumberish]): string;
  encodeFunctionData(
    functionFragment: "nextEpochBlock",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "nextRewardAt",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "nextRewardFor",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "removeRecipient",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "reservoir", values?: undefined): string;
  encodeFunctionData(functionFragment: "sdoge", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "setAdjustment",
    values: [BigNumberish, boolean, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;

  decodeFunctionResult(
    functionFragment: "addRecipient",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "adjustments",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "distribute", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "epochLength",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "info", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "nextEpochBlock",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "nextRewardAt",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "nextRewardFor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "removeRecipient",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "reservoir", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "sdoge", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setAdjustment",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;

  events: {
    "LogAddRecipient(address,uint256,uint256)": EventFragment;
    "LogRemoveRecipient(address,uint256)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "LogAddRecipient"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LogRemoveRecipient"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
}

export type LogAddRecipientEvent = TypedEvent<
  [string, BigNumber, BigNumber] & {
    recipient_: string;
    position: BigNumber;
    rewardRate_: BigNumber;
  }
>;

export type LogRemoveRecipientEvent = TypedEvent<
  [string, BigNumber] & { recipient_: string; index_: BigNumber }
>;

export type OwnershipTransferredEvent = TypedEvent<
  [string, string] & { previousOwner: string; newOwner: string }
>;

export class Distributor extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: DistributorInterface;

  functions: {
    addRecipient(
      recipient_: string,
      rewardRate_: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    adjustments(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [boolean, BigNumber, BigNumber] & {
        add: boolean;
        rate: BigNumber;
        target: BigNumber;
      }
    >;

    distribute(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    epochLength(overrides?: CallOverrides): Promise<[BigNumber]>;

    info(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber, string] & { rate: BigNumber; recipient: string }>;

    nextEpochBlock(overrides?: CallOverrides): Promise<[BigNumber]>;

    nextRewardAt(
      rate_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    nextRewardFor(
      recipient_: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    removeRecipient(
      index_: BigNumberish,
      recipient_: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    reservoir(overrides?: CallOverrides): Promise<[string]>;

    sdoge(overrides?: CallOverrides): Promise<[string]>;

    setAdjustment(
      index_: BigNumberish,
      add_: boolean,
      rate_: BigNumberish,
      target_: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner_: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  addRecipient(
    recipient_: string,
    rewardRate_: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  adjustments(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [boolean, BigNumber, BigNumber] & {
      add: boolean;
      rate: BigNumber;
      target: BigNumber;
    }
  >;

  distribute(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  epochLength(overrides?: CallOverrides): Promise<BigNumber>;

  info(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<[BigNumber, string] & { rate: BigNumber; recipient: string }>;

  nextEpochBlock(overrides?: CallOverrides): Promise<BigNumber>;

  nextRewardAt(
    rate_: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  nextRewardFor(
    recipient_: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  owner(overrides?: CallOverrides): Promise<string>;

  removeRecipient(
    index_: BigNumberish,
    recipient_: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  renounceOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  reservoir(overrides?: CallOverrides): Promise<string>;

  sdoge(overrides?: CallOverrides): Promise<string>;

  setAdjustment(
    index_: BigNumberish,
    add_: boolean,
    rate_: BigNumberish,
    target_: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner_: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    addRecipient(
      recipient_: string,
      rewardRate_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    adjustments(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [boolean, BigNumber, BigNumber] & {
        add: boolean;
        rate: BigNumber;
        target: BigNumber;
      }
    >;

    distribute(overrides?: CallOverrides): Promise<boolean>;

    epochLength(overrides?: CallOverrides): Promise<BigNumber>;

    info(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber, string] & { rate: BigNumber; recipient: string }>;

    nextEpochBlock(overrides?: CallOverrides): Promise<BigNumber>;

    nextRewardAt(
      rate_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    nextRewardFor(
      recipient_: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<string>;

    removeRecipient(
      index_: BigNumberish,
      recipient_: string,
      overrides?: CallOverrides
    ): Promise<void>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    reservoir(overrides?: CallOverrides): Promise<string>;

    sdoge(overrides?: CallOverrides): Promise<string>;

    setAdjustment(
      index_: BigNumberish,
      add_: boolean,
      rate_: BigNumberish,
      target_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    transferOwnership(
      newOwner_: string,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "LogAddRecipient(address,uint256,uint256)"(
      recipient_?: string | null,
      position?: null,
      rewardRate_?: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber],
      { recipient_: string; position: BigNumber; rewardRate_: BigNumber }
    >;

    LogAddRecipient(
      recipient_?: string | null,
      position?: null,
      rewardRate_?: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber],
      { recipient_: string; position: BigNumber; rewardRate_: BigNumber }
    >;

    "LogRemoveRecipient(address,uint256)"(
      recipient_?: string | null,
      index_?: null
    ): TypedEventFilter<
      [string, BigNumber],
      { recipient_: string; index_: BigNumber }
    >;

    LogRemoveRecipient(
      recipient_?: string | null,
      index_?: null
    ): TypedEventFilter<
      [string, BigNumber],
      { recipient_: string; index_: BigNumber }
    >;

    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): TypedEventFilter<
      [string, string],
      { previousOwner: string; newOwner: string }
    >;

    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): TypedEventFilter<
      [string, string],
      { previousOwner: string; newOwner: string }
    >;
  };

  estimateGas: {
    addRecipient(
      recipient_: string,
      rewardRate_: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    adjustments(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    distribute(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    epochLength(overrides?: CallOverrides): Promise<BigNumber>;

    info(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    nextEpochBlock(overrides?: CallOverrides): Promise<BigNumber>;

    nextRewardAt(
      rate_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    nextRewardFor(
      recipient_: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    removeRecipient(
      index_: BigNumberish,
      recipient_: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    reservoir(overrides?: CallOverrides): Promise<BigNumber>;

    sdoge(overrides?: CallOverrides): Promise<BigNumber>;

    setAdjustment(
      index_: BigNumberish,
      add_: boolean,
      rate_: BigNumberish,
      target_: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner_: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    addRecipient(
      recipient_: string,
      rewardRate_: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    adjustments(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    distribute(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    epochLength(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    info(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    nextEpochBlock(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    nextRewardAt(
      rate_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    nextRewardFor(
      recipient_: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    removeRecipient(
      index_: BigNumberish,
      recipient_: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    reservoir(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    sdoge(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    setAdjustment(
      index_: BigNumberish,
      add_: boolean,
      rate_: BigNumberish,
      target_: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner_: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
